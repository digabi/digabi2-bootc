---
name: Build disk images

on:
  workflow_dispatch:
    inputs:
      upload-to-s3:
        description: "Upload to S3"
        required: false
        default: false
        type: boolean
      platform:
        required: true
        type: choice
        options:
          - amd64
          - arm64
  pull_request:
    branches:
      - main
    paths:
      # - './disk_config/disk.toml'
      # - './disk_config/iso.toml'
      - './.github/workflows/build-disk.yml'

env:
  IMAGE_NAME: ${{ github.event.repository.name }} # output of build.yml, keep in sync
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # do not edit
  DEFAULT_TAG: "latest"
  BIB_IMAGE: "ghcr.io/lorbuschris/bootc-image-builder:20250608" # "quay.io/centos-bootc/bootc-image-builder:latest" - see https://github.com/osbuild/bootc-image-builder/pull/954

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build disk images
    runs-on: ${{ inputs.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    strategy:
      fail-fast: false
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - uses: extractions/setup-just@v3

      - name: Prepare environment
        run: |
          USER_UID=$(id -u)
          USER_GID=$(id -g)
          # Lowercase the image uri
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}
          echo "USER_UID=${USER_UID}" >> ${GITHUB_ENV}
          echo "USER_GID=${USER_GID}" >> ${GITHUB_ENV}

      - name: Install dependencies
        if: inputs.platform == 'arm64'
        run: |
          set -x
          sudo apt-get update -y
          sudo apt-get install -y \
            podman qemu-utils

      # - name: Maximize build space
      #   if: inputs.platform != 'arm64'
      #   uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
      #   with:
      #     remove-codeql: true

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # - name: Build disk images
      #   id: build
      #   uses: osbuild/bootc-image-builder-action@main
      #   with:
      #     builder-image: ${{ env.BIB_IMAGE }}
      #     config-file: ${{ matrix.disk-type == 'anaconda-iso' && './disk_config/iso.toml' || './disk_config/disk.toml' }}
      #     image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}
      #     chown: ${{ env.USER_UID }}:${{ env.USER_GID }}
      #     types: ${{ matrix.disk-type }}
      #     additional-args: --use-librepo=True

      - name: Login to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install to raw image
        id: prebuild
        run: |
          truncate -s 8G ${{ github.workspace }}/"${{ env.IMAGE_NAME }}.raw"
          sudo podman run \
            --rm \
            --privileged \
            --pid=host \
            --security-opt label=type:unconfined_t \
            -v /dev:/dev \
            -v /var/lib/containers:/var/lib/containers \
            -v "${{ github.workspace }}":/output \
              "${{ env.IMAGE_REGISTRY }}"/"${{ env.IMAGE_NAME }}":"${{ env.DEFAULT_TAG }}" \
                bootc install to-disk \
                  --generic-image \
                  --karg=quiet --karg=rhgb \
                  --via-loopback \
                  --filesystem btrfs \
                  --wipe /output/"${{ env.IMAGE_NAME }}.raw"

      - name: Build ISO image
        id: build
        run: qemu-img convert "${{ github.workspace }}/${{ env.IMAGE_NAME }}.raw" "${{ github.workspace }}/${{ env.IMAGE_NAME }}.iso"

      - name: Upload disk images and Checksum to Job Artifacts
        if: inputs.upload-to-s3 != true && github.event_name != 'pull_request'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          path: ${{ github.workspace }}/${{ env.IMAGE_NAME }}.iso
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
          overwrite: true

      # - name: Upload to S3
      #   if: inputs.upload-to-s3 == true && github.event_name != 'pull_request'
      #   shell: bash
      #   env:
      #     RCLONE_CONFIG_S3_TYPE: s3
      #     RCLONE_CONFIG_S3_PROVIDER: ${{ secrets.S3_PROVIDER }}
      #     RCLONE_CONFIG_S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
      #     RCLONE_CONFIG_S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
      #     RCLONE_CONFIG_S3_REGION: ${{ secrets.S3_REGION }}
      #     RCLONE_CONFIG_S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
      #     SOURCE_DIR: ${{ steps.build.outputs.output-directory }}
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y rclone
      #     rclone copy $SOURCE_DIR S3:${{ secrets.S3_BUCKET_NAME }}
